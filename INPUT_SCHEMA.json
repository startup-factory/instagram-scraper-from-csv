{
    "title": "Input schema for Instagram scraper",
    "description": "Below you can provide search query which will be used to search Instagram for profiles, hashtags or places. Alternatively you can provide direct page URLs. <br />Then on each page you can scrape page details, posts or comments. <br/> <strong>Important: Proxy is required to use this solution</strong>",
    "type": "object",
    "schemaVersion": 1,
    "properties": {
        "search": {
            "title": "Search",
            "type": "string",
            "description": "Here you can provide a search query which will be used to search Instagram for profiles, hashtags or places. <br /><br /><strong>This field is optional, but this field or 'Direct Instagram page URLs' must be provided</strong>",
            "editor": "textfield",
            "prefill": "Nature"
        },
        "searchType": {
            "title": "Search type",
            "type": "string",
            "description": "What type of pages to search (you can search hashtags, profiles and places)",
            "editor": "select",
            "enum": ["user", "hashtag", "place"],
            "enumTitles": ["Search users", "Search hashtags", "Search places (scrolls only with login)"],
            "default": "hashtag"
        },
        "searchLimit": {
            "title": "Search results limit",
            "type": "integer",
            "description": "How many search results (eq. pages) should be processed.",
            "editor": "number",
            "default": 10,
            "minimum": 1,
            "maximum": 100
        },
        "startUrls": {
            "title": "csv list of url",
            "type": "array",
            "description": "csv list of instagram accounts where the actor will start crawling.",
            "prefill": [{ "url": "https://apify.com" }],
            "editor": "requestListSources"
        },
        "startNames": {
            "title": "csv list of profile names",
            "type": "array",
            "description": "csv list of instagram accounts where the actor will start crawling.",
            "prefill": [{ "url": "https://apify.com" }],
            "editor": "requestListSources"
        },
        "directUrls": {
            "title": "Direct Instagram page URLs",
            "type": "array",
            "description": "If you already have URL(s) of page(s) you wish to scrape, you can set them here. <br /><br /><strong>This field is optional, but this field or 'Search' must be provided</strong>. Location URLs scroll only with login.",
            "editor": "stringList",
            "placeholderValue": "URL",
            "patternValue": "https:\\/\\/www\\.instagram\\.com\\/.+",
            "uniqueItems": true
        },
        "resultsType": {
            "title": "What to scrape from each page.",
            "type": "string",
            "description": "What to scrape from each Instagram page URL or search result.  You need to provide correct parent pages, e.g. comments can be scraped only from posts, not from profiles.",
            "editor": "select",
            "enum": ["posts", "comments", "details"],
            "enumTitles": [
                "Posts (from profile pages, hashtag or place search)",
                "Comments (from post pages)",
                "Details (of profiles, posts or search pages - from a profile, post or search pages)"],
            "default": "posts"
        },
        "resultsLimit": {
            "title": "Max items",
            "type": "integer",
            "description": "How many posts or comments to scrape from each Instagram URL or found page, ignored when \"Details\" type is specified. Notice that if you use search via hashtags or place, each found page will have this limit separately. You can limit searchLimit to reduce the number of total results.",
            "editor": "number",
            "unit": "per page",
            "default": 200
        },
        "maxRequestRetries": {
            "title": "Max request retries",
            "type": "integer",
            "description": "How many times a page will be retried in case of being blocked or other errors.",
            "default": 5
        },
        "scrapePostsUntilDate": {
            "title": "Scrape posts until date",
            "type": "string",
            "description": "Scrapes post from the current date until it reaches a post older than a provided date. The date should be in format YYYY-MM-DD. By default scrapes all posts.",
            "editor": "textfield"
        },
        "scrollWaitSecs": {
            "title": "Scroll wait seconds",
            "type": "integer",
            "description": "How many seconds it will wait every 100 posts/comments when scrolling. If you scrape more than 1000 items, it is important to slow down to not get blocked. The seconds are randomized a bit. If you get blocked anyway, try to increase this number.",
            "default": 15
        },
        "proxy": {
            "title": "Proxy configuration",
            "type": "object",
            "description": "<strong>Proxy is required to run this actor!</strong> Either use Apify proxy, or provide your own proxy servers.",
            "prefill": { "useApifyProxy": true, "apifyProxyGroups": [] },
            "editor": "proxy"
        },
        "loginCookies": {
            "title": "Cookies",
            "type": "array",
            "description": "If you want to sign in to Instagram to have access to more data than on anonymous profile, but do not wish to have your credentials in input, then you can use your cookies.",
            "editor": "json",
            "sectionCaption": "Login using cookies",
            "sectionDescription": "Instagram limits access to certain data (likes, post user data, followers and others) if a user is anonymous. You can provide your cookies here (copied from chrome plugin like 'EditThisCookie' to use a normal account. Do not use your own cookies here and rather create a new temporary account. When cookies are used, the run is limited to concurrency 1 and one session, so that the account does not get banned too soon."
        },
        "likedByLimit": {
            "title": "Get post likes",
            "type": "integer",
            "description": "If this limit is set above 0, then the solution will attempt to load additional details about users who liked the post.",
            "editor": "number",
            "unit": "likes",
            "default": 0,
            "sectionCaption": "Followers, following, likes",
            "sectionDescription": "Features that require login. If limits in this section are set above 0, then when the solution enters a page, it attempts to load the specified items until the limit is reached. "
        },
        "followingLimit": {
            "title": "Get profile following",
            "type": "integer",
            "description": "If this limit is set above 0, then the solution will attempt to find users who the profile owner is following.",
            "editor": "number",
            "unit": "users",
            "default": 0
        },
        "followedByLimit": {
            "title": "Get profile followed by",
            "type": "integer",
            "description": "If this limit is set above 0, then the solution will attempt to find users who the profile owner is followed by.",
            "editor": "number",
            "unit": "users",
            "default": 0
        },
        "expandOwners": {
            "title": "Query post owner",
            "type": "boolean",
            "description": "If this feature is used, then for each post the solution will attempt to query additional details about it's owner. This will drastically slow down the crawling speed and increase the chance of an account ban if credentials are provided.",
            "editor": "checkbox",
            "sectionCaption": "Experimental features",
            "sectionDescription": "Features in this section are highly experimental, can result in a ban of the account if logged in and might cause the solution to fail."
        },
        "extendOutputFunction": {
            "title": "Extend output function",
            "type": "string",
            "nullable": true,
            "description": "Function that takes a JQuery handle ($) as an argument and returns data that will be merged with the default output",
            "prefill": "($) => { return {} }",
            "editor": "javascript"
        }
    },
    "required": ["proxy"]
}
